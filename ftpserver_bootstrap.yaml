---
- name: Configure FTP Server with Python dependencies
  hosts: localhost
  connection: local
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python

  tasks:
    # Load variables
    - name: Include environment variables
      include_vars: "/tmp/ftpserver_install/vars/env.yaml"

    - name: Include environment group variables
      include_vars: "/tmp/ftpserver_install/vars/environment_group/{{environment_group}}.yaml"

    # Install system dependencies
    - name: Install SELinux Python3 bindings
      yum:
        name: libselinux-python3
        state: present

    - name: Install build dependencies
      yum:
        name:
          - gcc
          - libffi-devel
          - python3-libselinux
          - openssl-devel
        state: present

    # Python package installation
    - name: Verify requirements.txt exists
      stat:
        path: "{{ playbook_dir }}/requirements.txt"
      register: requirements_file

    - name: Install Python packages
      pip:
        requirements: "{{ playbook_dir }}/requirements.txt"
        executable: "/usr/bin/python3 -m pip"
        extra_args: "--index-url {{ py_nexus_url }} --no-cache-dir"
      when: requirements_file.stat.exists
      ignore_errors: yes

    # EFS utilities installation
    - name: Download amazon-efs-utils
      get_url:
        url: "{{ s3_install_bucket }}/amazon-efs-utils-{{ amazon_efs_util_version }}.noarch.rpm"
        dest: /tmp/amazon-efs-utils.noarch.rpm
      environment: "{{ proxy_env }}"

    - name: Install amazon-efs-utils
      yum:
        name: /tmp/amazon-efs-utils.noarch.rpm
        state: present

    # User and group management
    - name: Create required groups
      group:
        name: "{{ item }}"
        state: present
      loop:
        - devops
        - sftp

    - name: Create users
      user:
        name: "{{ item.name }}"
        comment: "{{ item.name }}"
        group: "{{ item.group }}"
      loop:
        - { name: 'devops', group: 'devops' }
        - { name: 'sftp_wcrm', group: 'sftp' }

    - name: Set user passwords
      user:
        name: "{{ item.name }}"
        password: "{{ item.password | password_hash('sha512') }}"
        update_password: always
      loop:
        - { name: 'devops', password: 'devops' }
        - { name: 'sftp_wcrm', password: 'sftp_wcrm' }

    # Sudoers configuration
    - name: Configure sudo access
      copy:
        dest: "/etc/sudoers.d/01-{{ item.user }}"
        content: "{{ item.user }} ALL=(ALL) NOPASSWD: ALL\n"
        validate: 'visudo -cf %s'
      loop:
        - { user: 'devops' }
        - { user: 'sftp_wcrm' }

    # SFTP directory setup
    - name: Create SFTP directory structure
      file:
        path: "{{ item.path }}"
        state: directory
        mode: "{{ item.mode }}"
        owner: "{{ item.owner | default(omit) }}"
        group: "{{ item.group | default(omit) }}"
      loop:
        - { path: '/home/sftp_wcrm', mode: '0755' }
        - { path: '/home/sftp_wcrm/.ssh', mode: '0700', owner: 'sftp_wcrm', group: 'sftp' }

    - name: Deploy SSH authorized key
      copy:
        content: "{{ edw_pub_key }}"
        dest: "/home/sftp_wcrm/.ssh/authorized_keys"
        mode: '0600'
        owner: sftp_wcrm
        group: sftp

    # SSH configuration
    - name: Download SSH host keys
      get_url:
        url: "{{ s3_install_bucket }}/host_keys/buildbox/ssh_host_keys.tar.gz"
        dest: /tmp/ssh_host_keys.tar.gz
      environment: "{{ proxy_env }}"
      ignore_errors: yes

    - name: Extract SSH host keys
      unarchive:
        src: /tmp/ssh_host_keys.tar.gz
        dest: /etc/ssh/
        remote_src: yes
      ignore_errors: yes

    - name: Set SSH host key permissions
      file:
        path: "/etc/ssh/ssh_host_{{ item }}"
        owner: root
        group: root
        mode: '0600'
      loop:
        - ecdsa_key
        - ecdsa_key.pub
        - ed25519_key
        - ed25519_key.pub
        - rsa_key
        - rsa_key.pub
      ignore_errors: yes

    - name: Configure SSH daemon
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '#Port.*', line: 'Port 22' }
        - { regexp: '^#?PubkeyAuthentication\\s+.+', line: 'PubkeyAuthentication yes' }

    - name: Restart SSH service
      service:
        name: sshd
        state: restarted

    # Cleanup
    - name: Remove temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/amazon-efs-utils.noarch.rpm
        - /tmp/ssh_host_keys.tar.gz
